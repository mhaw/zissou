# This file is an example. Copy to .env and fill in your actual values.
#
# Required for core application functionality
# -----------------------------------------
# GCP_PROJECT_ID: Your Google Cloud Project ID.
GCP_PROJECT_ID=""
# GCP_REGION: The region where your Cloud Run service is deployed (e.g., us-central1).
GCP_REGION=""
# GCS_BUCKET: The Google Cloud Storage bucket used for file storage.
GCS_BUCKET=""
# SECRET_KEY: A strong, random string for Flask session management.
#             Generate with `python -c 'import os; print(os.urandom(24))'`
SECRET_KEY=""
# FLASK_SECRET_KEY: Alias for SECRET_KEY, used by some Flask extensions.
FLASK_SECRET_KEY="${SECRET_KEY}"
# CSRF_SECRET_KEY: A separate strong, random string for Flask-WTF CSRF protection.
#                  Generate with `python -c 'import os; print(os.urandom(24))'`
CSRF_SECRET_KEY=""
# CLOUD_TASKS_QUEUE: The name of the Cloud Tasks queue for background jobs.
CLOUD_TASKS_QUEUE=""
# CLOUD_TASKS_LOCATION: The location of your Cloud Tasks queue.
CLOUD_TASKS_LOCATION=""
# SERVICE_ACCOUNT_EMAIL: Service account email for Cloud Tasks and other GCP services.
#                        Required if AUTH_ENABLED is true and ENV is not development.
SERVICE_ACCOUNT_EMAIL=""
# SERVICE_URL: Fully qualified base URL for this service (e.g., https://zissou-....run.app).
#              Cloud Tasks uses this to enqueue background jobs.
SERVICE_URL=""
# ENV: Application environment (e.g., "development", "production").
ENV="development"
# CANONICAL_HOST: The canonical domain for your application (e.g., "zissou-audio.com").
#                 Used for enforcing redirects and cookie scope.
CANONICAL_HOST=""
# FLASK_SESSION_COOKIE_SECURE: Set to "true" for HTTPS-only session cookies (recommended for production).
FLASK_SESSION_COOKIE_SECURE="true"

# --- Authentication Settings ---
# AUTH_BACKEND: Use 'firebase' for the built-in, cost-effective login system.
#               Use 'iap' if you have an external load balancer with Identity-Aware Proxy.
AUTH_BACKEND="firebase"
# AUTH_ENABLED: Set to "true" to enable authentication.
AUTH_ENABLED="true"

# --- Firebase Settings (Required if AUTH_BACKEND is 'firebase' and AUTH_ENABLED is 'true') ---
# Get these values from your Firebase project's web app configuration.
# 1. Go to the Firebase Console (https://console.firebase.google.com/)
# 2. Select your project.
# 3. Go to Project Settings > General > Your apps > Web app.
# 4. Find the firebaseConfig object.
FIREBASE_PROJECT_ID=""
FIREBASE_WEB_API_KEY=""
FIREBASE_AUTH_DOMAIN=""
# ALLOWED_ORIGINS: Comma-separated list of origins allowed for CORS.
#                  Include your custom domain (e.g., https://zissou-audio.com),
#                  Cloud Run URLs (e.g., https://your-service-xxxxxx-uc.a.run.app),
#                  and http://localhost:5000 for local development.
ALLOWED_ORIGINS=""

# Optional: Admin users
# ADMIN_EMAILS: Comma-separated list of email addresses for users who should have admin privileges.
ADMIN_EMAILS=""

# --- Content Security Policy (CSP) Settings ---
# CSP_ADDITIONAL_CONNECT_SRC: Comma-separated list of additional domains for connect-src.
CSP_ADDITIONAL_CONNECT_SRC=""
# CSP_ADDITIONAL_SCRIPT_SRC: Comma-separated list of additional domains for script-src.
CSP_ADDITIONAL_SCRIPT_SRC=""
# CSP_ADDITIONAL_STYLE_SRC: Comma-separated list of additional domains for style-src.
CSP_ADDITIONAL_STYLE_SRC=""
# CSP_REPORT_URI: URL to send CSP violation reports to (e.g., a reporting service).
CSP_REPORT_URI=""
# CSP_REPORT_TO_ENDPOINT: URL for the Report-To header (can be same as CSP_REPORT_URI).
CSP_REPORT_TO_ENDPOINT=""

# --- Caching Settings ---
# CACHE_TYPE: Override cache backend. Options: "SimpleCache" (dev default), "RedisCache" (prod default), "firestore", "FileSystemCache", "NullCache".
CACHE_TYPE=""
# CACHE_REDIS_URL: Redis connection string when using RedisCache (e.g., redis://10.0.0.5:6379/0).
CACHE_REDIS_URL=""
# CACHE_FIRESTORE_COLLECTION: Collection to use for 'firestore' cache. Defaults to 'zissou-cache'.
CACHE_FIRESTORE_COLLECTION="zissou-cache"
# CACHE_DEFAULT_TIMEOUT: Cache TTL in seconds; defaults to 300 when unset.
CACHE_DEFAULT_TIMEOUT=""

# --- Rate Limiting Settings ---
# RATELIMIT_STORAGE_URI: URI for Flask-Limiter storage.
#                        "memory://" for in-memory (dev), "firestore://collection_name" for Firestore (prod).
RATELIMIT_STORAGE_URI="memory://"

# --- AI Enhancements ---
# Set to "true" to enable asynchronous AI summaries for processed items.
ENABLE_SUMMARY="false"
# SUMMARY_PROVIDER selects the model vendor: "openai" or "gemini". Leave blank to use the local fallback summariser.
SUMMARY_PROVIDER=""
# SUMMARY_MODEL overrides the default model (gpt-4o-mini / gemini-1.5-flash). Optional.
SUMMARY_MODEL=""
# SUMMARY_MAX_WORDS limits summary length (default 300).
SUMMARY_MAX_WORDS="300"
# AI_ENRICHMENT_MAX_WORKERS limits concurrent enrichment calls (defaults to 2 to cap spend).
AI_ENRICHMENT_MAX_WORKERS="2"
# AI_ENRICHMENT_MAX_CHARS clips article text before sending to the model (defaults to 12000 characters).
AI_ENRICHMENT_MAX_CHARS="12000"

# Enable AI-generated auto tags; uses the same providers as summaries.
ENABLE_AUTO_TAGS="false"
# AUTO_TAG_PROVIDER mirrors SUMMARY_PROVIDER; leave blank to rely on the fallback keyword extraction.
AUTO_TAG_PROVIDER=""
# AUTO_TAG_MODEL overrides the tagging model (optional).
AUTO_TAG_MODEL=""
# AUTO_TAG_LIMIT caps the number of generated tags (default 6).
AUTO_TAG_LIMIT="6"
